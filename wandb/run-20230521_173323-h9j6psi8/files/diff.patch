diff --git a/code/C4_evaluation.ipynb b/code/C4_evaluation.ipynb
index 3256751..12e299d 100644
--- a/code/C4_evaluation.ipynb
+++ b/code/C4_evaluation.ipynb
@@ -99,16 +99,328 @@
    "metadata": {},
    "outputs": [
     {
-     "ename": "AttributeError",
-     "evalue": "'NoneType' object has no attribute 'group'",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
-      "Cell \u001b[0;32mIn[3], line 21\u001b[0m\n\u001b[1;32m     18\u001b[0m         auc_list\u001b[39m.\u001b[39mappend(\u001b[39mround\u001b[39m(auc, \u001b[39m4\u001b[39m))\n\u001b[1;32m     19\u001b[0m     \u001b[39mreturn\u001b[39;00m model_list, auc_list, filedir_list\n\u001b[0;32m---> 21\u001b[0m model_list, auc_list, filedir_list \u001b[39m=\u001b[39m calculate_auc(\u001b[39m'\u001b[39;49m\u001b[39m1919\u001b[39;49m\u001b[39m'\u001b[39;49m, \u001b[39m'\u001b[39;49m\u001b[39m0520\u001b[39;49m\u001b[39m'\u001b[39;49m)\n",
-      "Cell \u001b[0;32mIn[3], line 14\u001b[0m, in \u001b[0;36mcalculate_auc\u001b[0;34m(time, day, filedir)\u001b[0m\n\u001b[1;32m     12\u001b[0m auc_list \u001b[39m=\u001b[39m []\n\u001b[1;32m     13\u001b[0m \u001b[39mfor\u001b[39;00m filedir \u001b[39min\u001b[39;00m filedir_list:\n\u001b[0;32m---> 14\u001b[0m     filedir_found \u001b[39m=\u001b[39m re\u001b[39m.\u001b[39;49msearch(\u001b[39m'\u001b[39;49m\u001b[39mDeepPP_(.+?)_\u001b[39;49m\u001b[39m'\u001b[39;49m, filedir)\u001b[39m.\u001b[39;49mgroup(\u001b[39m1\u001b[39m)\n\u001b[1;32m     15\u001b[0m     model \u001b[39m=\u001b[39m load_multiple_model(filedir, filedir_found)\n\u001b[1;32m     16\u001b[0m     model_list\u001b[39m.\u001b[39mappend(model)\n",
-      "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'group'"
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn1_1617_bs2048_weight0/1fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn1_1617_bs2048_weight0/2fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn1_1617_bs2048_weight0/3fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn1_1617_bs2048_weight0/4fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn1_1617_bs2048_weight0/0fold_best_model.pth\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "acfbe665fdc64849b417919db81c82d3",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "6df439aca53e43618ca0e4b72d274e30",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "88ad08dbd0c7428181cae727999d67f8",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "414eea134d20412d9b9bd0a9a0b9a1de",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "bb0384a6eb82453898d5835dc0d28138",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn2_1617_bs2048_weight0/1fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn2_1617_bs2048_weight0/2fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn2_1617_bs2048_weight0/3fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn2_1617_bs2048_weight0/4fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn2_1617_bs2048_weight0/0fold_best_model.pth\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "f56c99ac4a54439ba29257011063a8e0",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "3cb7d6d3d9274236bcea112a27b73bf0",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "4be01e0dc5014422ba5eef058473f098",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "8551bc00c2d34a0bb9d7be5c96e78981",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "4f96a6db80f84159864194cb475f39e3",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn3_1617_bs2048_weight0/1fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn3_1617_bs2048_weight0/2fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn3_1617_bs2048_weight0/3fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn3_1617_bs2048_weight0/4fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn3_1617_bs2048_weight0/0fold_best_model.pth\n"
      ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "5aa41a09dc4b439797e06c477fee33a7",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "3563321e777d4eaf92a0f282dea08639",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "dfc4d11974eb4acdb2089cc9ffb1e553",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "b13f586dca04423bb625bade4bc09d98",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "b12d8d6ffb57402e8d1c42a37836a7e5",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn4_1617_bs2048_weight0/1fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn4_1617_bs2048_weight0/2fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn4_1617_bs2048_weight0/3fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn4_1617_bs2048_weight0/4fold_best_model.pth\n",
+      "/home/hb/python/efficientnet_kincnn/saved_model/0521/kincnn4_1617_bs2048_weight0/0fold_best_model.pth\n"
+     ]
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "96a602329fe44abe9c5e0bbc86a6630e",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "3be81019a11f459a91e5cc2ef65b405c",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "a55047a8aec54207ab3aae34630bcff2",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "fc866132ad824718972698a25e209921",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "19df358c741846dca24443865135a280",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "  0%|          | 0/4 [00:00<?, ?it/s]"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
     }
    ],
    "source": [
@@ -132,7 +444,7 @@
     "        auc_list.append(round(auc, 4))\n",
     "    return model_list, auc_list, filedir_list\n",
     "\n",
-    "model_list, auc_list, filedir_list = calculate_auc('1919', '0520')"
+    "model_list, auc_list, filedir_list = calculate_auc('1617', '0521')"
    ]
   },
   {
@@ -157,7 +469,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 4,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -199,7 +511,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -213,7 +525,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [
     {
@@ -429,9 +741,81 @@
        "      <td>(3, 3)</td>\n",
        "      <td>(1, 1)</td>\n",
        "    </tr>\n",
+       "    <tr>\n",
+       "      <th>7</th>\n",
+       "      <td>84~88avg</td>\n",
+       "      <td>0.844575</td>\n",
+       "      <td>(3, 1)</td>\n",
+       "      <td>(1, 1)</td>\n",
+       "      <td>True</td>\n",
+       "      <td>(2, 1)</td>\n",
+       "      <td>8</td>\n",
+       "      <td>16</td>\n",
+       "      <td>(5, 1)</td>\n",
+       "      <td>(1, 1)</td>\n",
+       "      <td>...</td>\n",
+       "      <td>32</td>\n",
+       "      <td>64</td>\n",
+       "      <td>(3, 1)</td>\n",
+       "      <td>(2, 1)</td>\n",
+       "      <td>3960</td>\n",
+       "      <td>0520/DeepPP_kincnn4_1835_bs1024_weight0</td>\n",
+       "      <td>64.0</td>\n",
+       "      <td>128.0</td>\n",
+       "      <td>(3, 1)</td>\n",
+       "      <td>(1, 1)</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>8</th>\n",
+       "      <td>88~92avg</td>\n",
+       "      <td>0.836575</td>\n",
+       "      <td>(3, 1)</td>\n",
+       "      <td>(1, 1)</td>\n",
+       "      <td>True</td>\n",
+       "      <td>(2, 1)</td>\n",
+       "      <td>8</td>\n",
+       "      <td>16</td>\n",
+       "      <td>(5, 1)</td>\n",
+       "      <td>(1, 1)</td>\n",
+       "      <td>...</td>\n",
+       "      <td>32</td>\n",
+       "      <td>64</td>\n",
+       "      <td>(3, 1)</td>\n",
+       "      <td>(2, 1)</td>\n",
+       "      <td>2040</td>\n",
+       "      <td>0520/kincnn4_1919_bs2048_weight0</td>\n",
+       "      <td>64.0</td>\n",
+       "      <td>128.0</td>\n",
+       "      <td>(3, 1)</td>\n",
+       "      <td>(2, 1)</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>9</th>\n",
+       "      <td>92~96avg</td>\n",
+       "      <td>0.838175</td>\n",
+       "      <td>(3, 1)</td>\n",
+       "      <td>(1, 1)</td>\n",
+       "      <td>True</td>\n",
+       "      <td>(2, 1)</td>\n",
+       "      <td>8</td>\n",
+       "      <td>16</td>\n",
+       "      <td>(5, 1)</td>\n",
+       "      <td>(1, 1)</td>\n",
+       "      <td>...</td>\n",
+       "      <td>32</td>\n",
+       "      <td>64</td>\n",
+       "      <td>(3, 1)</td>\n",
+       "      <td>(2, 1)</td>\n",
+       "      <td>3960</td>\n",
+       "      <td>0521/kincnn4_1617_bs2048_weight0</td>\n",
+       "      <td>64.0</td>\n",
+       "      <td>128.0</td>\n",
+       "      <td>(3, 1)</td>\n",
+       "      <td>(1, 1)</td>\n",
+       "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
-       "<p>7 rows × 24 columns</p>\n",
+       "<p>10 rows × 24 columns</p>\n",
        "</div>"
       ],
       "text/plain": [
@@ -443,6 +827,9 @@
        "4  72~76avg  0.843300                (3, 1)                (1, 1)   \n",
        "5  76~80avg  0.841200                (3, 1)                (1, 1)   \n",
        "6  80~84avg  0.841225                (3, 1)                (1, 1)   \n",
+       "7  84~88avg  0.844575                (3, 1)                (1, 1)   \n",
+       "8  88~92avg  0.836575                (3, 1)                (1, 1)   \n",
+       "9  92~96avg  0.838175                (3, 1)                (1, 1)   \n",
        "\n",
        "   conv_stem_pooling conv_stem_pooling_kernel_size  MBconv0_inp  MBconv0_oup  \\\n",
        "0               True                        (2, 1)            8           16   \n",
@@ -452,6 +839,9 @@
        "4               True                        (2, 1)            8           16   \n",
        "5               True                        (2, 1)            8           16   \n",
        "6               True                        (2, 1)            8           16   \n",
+       "7               True                        (2, 1)            8           16   \n",
+       "8               True                        (2, 1)            8           16   \n",
+       "9               True                        (2, 1)            8           16   \n",
        "\n",
        "  MBconv0_kernel_size MBconv0_stride  ...  MBconv2_inp  MBconv2_oup  \\\n",
        "0              (5, 1)         (1, 1)  ...           32           64   \n",
@@ -461,6 +851,9 @@
        "4              (5, 1)         (1, 1)  ...           32           64   \n",
        "5              (5, 1)         (1, 1)  ...           32           64   \n",
        "6              (5, 1)         (1, 1)  ...           32           64   \n",
+       "7              (5, 1)         (1, 1)  ...           32           64   \n",
+       "8              (5, 1)         (1, 1)  ...           32           64   \n",
+       "9              (5, 1)         (1, 1)  ...           32           64   \n",
        "\n",
        "  MBconv2_kernel_size MBconv2_stride  last_features  \\\n",
        "0              (3, 1)         (2, 1)           3960   \n",
@@ -470,6 +863,9 @@
        "4              (3, 1)         (2, 1)           3960   \n",
        "5              (3, 1)         (2, 1)           3960   \n",
        "6              (3, 1)         (2, 1)           3960   \n",
+       "7              (3, 1)         (2, 1)           3960   \n",
+       "8              (3, 1)         (2, 1)           2040   \n",
+       "9              (3, 1)         (2, 1)           3960   \n",
        "\n",
        "                                model_path MBconv3_inp MBconv3_oup  \\\n",
        "0  0519/DeepPP_kincnn4_0001_bs1024_weight0         NaN         NaN   \n",
@@ -479,6 +875,9 @@
        "4  0519/DeepPP_kincnn4_1847_bs1024_weight0        64.0       128.0   \n",
        "5  0520/DeepPP_kincnn4_0039_bs1024_weight0        64.0       128.0   \n",
        "6  0520/DeepPP_kincnn4_1757_bs1024_weight0        64.0       128.0   \n",
+       "7  0520/DeepPP_kincnn4_1835_bs1024_weight0        64.0       128.0   \n",
+       "8         0520/kincnn4_1919_bs2048_weight0        64.0       128.0   \n",
+       "9         0521/kincnn4_1617_bs2048_weight0        64.0       128.0   \n",
        "\n",
        "   MBconv3_kernel_size MBconv3_stride  \n",
        "0                  NaN            NaN  \n",
@@ -488,11 +887,14 @@
        "4               (5, 3)         (1, 1)  \n",
        "5               (5, 1)         (1, 1)  \n",
        "6               (3, 3)         (1, 1)  \n",
+       "7               (3, 1)         (1, 1)  \n",
+       "8               (3, 1)         (2, 1)  \n",
+       "9               (3, 1)         (1, 1)  \n",
        "\n",
-       "[7 rows x 24 columns]"
+       "[10 rows x 24 columns]"
       ]
      },
-     "execution_count": 14,
+     "execution_count": 6,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -21266,7 +21668,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.10.9"
+   "version": "3.10.4"
   },
   "orig_nbformat": 4,
   "vscode": {
diff --git a/code/model_info.xlsx b/code/model_info.xlsx
index d156840..91c5806 100644
Binary files a/code/model_info.xlsx and b/code/model_info.xlsx differ
diff --git a/gpu_0.sh b/gpu_0.sh
deleted file mode 100755
index f1a7e97..0000000
--- a/gpu_0.sh
+++ /dev/null
@@ -1,30 +0,0 @@
-#!/bin/bash
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-A 9 Natural log 512 500 1e-3 5 7 0.5 25 
-
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-B 9 Natural log 512 500 1e-3 5 7 0.5 25 
-
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-C 9 Natural log 512 500 1e-3 5 7 0.5 25 
-
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-A 9 Natural Normalize 512 500 1e-3 5 7 0.5 25 
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-A 10 Natural Normalize 512 500 1e-3 5 7 0.5 25
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-C 9 Natural Normalize 512 500 1e-3df_test_st 5 7 0.5 25 
-#     config.gpu_num = sys.argv[1]
-#     config.batch_size = int(sys.argv[2])
-#     config.n_epoch = int(sys.argv[3])
-#     config.defalut_learning_rate = float(sys.argv[4])
-#     config.fold_num = int(sys.argv[5])
-#     config.scheduler_patience, config.scheduler_factor = int(sys.argv[6]), float(sys.argv[7])
-#     config.erls_patience = int(sys.argv[8])
-#     config.dataset = sys.argv[9]
-#     config.pretrain_fold_num = sys.argv[10]
-#     config.model = f'efficientnet-phospho-B-15'
-#     config.save_dir = f'/home/hb/python/efficientnet_kincnn/saved_model/{datetime.today().strftime("%m%d")}/DeepPP_{config.dataset}_{datetime.today().strftime("%H%M")}_bs{config.batch_size}_weight{config.pretrain_fold_num}'
-python3 /home/hb/python/efficientnet_kincnn/DeepPhospho.py 0 2048 500 1e-3 5 7 0.7 50 kincnn1 0
-
-
diff --git a/gpu_1.sh b/gpu_1.sh
deleted file mode 100755
index 7e627a8..0000000
--- a/gpu_1.sh
+++ /dev/null
@@ -1,30 +0,0 @@
-#!/bin/bash
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-A 9 Natural log 512 500 1e-3 5 7 0.5 25 
-
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-B 9 Natural log 512 500 1e-3 5 7 0.5 25 
-
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-C 9 Natural log 512 500 1e-3 5 7 0.5 25 
-
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-A 9 Natural Normalize 512 500 1e-3 5 7 0.5 25 
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-A 10 Natural Normalize 512 500 1e-3 5 7 0.5 25
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-C 9 Natural Normalize 512 500 1e-3df_test_st 5 7 0.5 25 
-#     config.gpu_num = sys.argv[1]
-#     config.batch_size = int(sys.argv[2])
-#     config.n_epoch = int(sys.argv[3])
-#     config.defalut_learning_rate = float(sys.argv[4])
-#     config.fold_num = int(sys.argv[5])
-#     config.scheduler_patience, config.scheduler_factor = int(sys.argv[6]), float(sys.argv[7])
-#     config.erls_patience = int(sys.argv[8])
-#     config.dataset = sys.argv[9]
-#     config.pretrain_fold_num = sys.argv[10]
-#     config.model = f'efficientnet-phospho-B-15'
-#     config.save_dir = f'/home/hb/python/efficientnet_kincnn/saved_model/{datetime.today().strftime("%m%d")}/DeepPP_{config.dataset}_{datetime.today().strftime("%H%M")}_bs{config.batch_size}_weight{config.pretrain_fold_num}'
-python3 /home/hb/python/efficientnet_kincnn/DeepPhospho2.py 1 2048 500 1e-3 5 7 0.7 50 kincnn2 0
-
-
diff --git a/gpu_2.sh b/gpu_2.sh
deleted file mode 100755
index 05210d3..0000000
--- a/gpu_2.sh
+++ /dev/null
@@ -1,30 +0,0 @@
-#!/bin/bash
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-A 9 Natural log 512 500 1e-3 5 7 0.5 25 
-
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-B 9 Natural log 512 500 1e-3 5 7 0.5 25 
-
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-C 9 Natural log 512 500 1e-3 5 7 0.5 25 
-
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-A 9 Natural Normalize 512 500 1e-3 5 7 0.5 25 
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-A 10 Natural Normalize 512 500 1e-3 5 7 0.5 25
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-C 9 Natural Normalize 512 500 1e-3df_test_st 5 7 0.5 25 
-#     config.gpu_num = sys.argv[1]
-#     config.batch_size = int(sys.argv[2])
-#     config.n_epoch = int(sys.argv[3])
-#     config.defalut_learning_rate = float(sys.argv[4])
-#     config.fold_num = int(sys.argv[5])
-#     config.scheduler_patience, config.scheduler_factor = int(sys.argv[6]), float(sys.argv[7])
-#     config.erls_patience = int(sys.argv[8])
-#     config.dataset = sys.argv[9]
-#     config.pretrain_fold_num = sys.argv[10]
-#     config.model = f'efficientnet-phospho-B-15'
-#     config.save_dir = f'/home/hb/python/efficientnet_kincnn/saved_model/{datetime.today().strftime("%m%d")}/DeepPP_{config.dataset}_{datetime.today().strftime("%H%M")}_bs{config.batch_size}_weight{config.pretrain_fold_num}'
-python3 /home/hb/python/efficientnet_kincnn/DeepPhospho3.py 2 2048 500 1e-3 5 7 0.7 50 kincnn3 0
-
-
diff --git a/gpu_3.sh b/gpu_3.sh
deleted file mode 100755
index f78a5e4..0000000
--- a/gpu_3.sh
+++ /dev/null
@@ -1,30 +0,0 @@
-#!/bin/bash
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-A 9 Natural log 512 500 1e-3 5 7 0.5 25 
-
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-B 9 Natural log 512 500 1e-3 5 7 0.5 25 
-
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-C 9 Natural log 512 500 1e-3 5 7 0.5 25 
-
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-A 9 Natural Normalize 512 500 1e-3 5 7 0.5 25 
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-A 10 Natural Normalize 512 500 1e-3 5 7 0.5 25
-
-# python /home/hb/neoantigen/code/DeepNeo_.py 0 HLA-C 9 Natural Normalize 512 500 1e-3df_test_st 5 7 0.5 25 
-#     config.gpu_num = sys.argv[1]
-#     config.batch_size = int(sys.argv[2])
-#     config.n_epoch = int(sys.argv[3])
-#     config.defalut_learning_rate = float(sys.argv[4])
-#     config.fold_num = int(sys.argv[5])
-#     config.scheduler_patience, config.scheduler_factor = int(sys.argv[6]), float(sys.argv[7])
-#     config.erls_patience = int(sys.argv[8])
-#     config.dataset = sys.argv[9]
-#     config.pretrain_fold_num = sys.argv[10]
-#     config.model = f'efficientnet-phospho-B-15'
-#     config.save_dir = f'/home/hb/python/efficientnet_kincnn/saved_model/{datetime.today().strftime("%m%d")}/DeepPP_{config.dataset}_{datetime.today().strftime("%H%M")}_bs{config.batch_size}_weight{config.pretrain_fold_num}'
-python3 /home/hb/python/efficientnet_kincnn/DeepPhospho4.py 3 2048 500 1e-3 5 7 0.7 50 kincnn4 0
-
-
diff --git a/utils.py b/utils.py
index bbe80a4..719ec14 100644
--- a/utils.py
+++ b/utils.py
@@ -587,10 +587,10 @@ def efficientnet(
 ):
     """Creates a efficientnet model."""
     blocks_args = [
-        "r1_ckh5_ckw1_pkh0_pkw1_csh1_csw1_psh3_psw1_e1_i8_o16_se0.5",
-        "r1_ckh5_ckw1_pkh0_pkw0_csh2_csw1_psh2_psw1_e1_i16_o32_se0.5",
-        "r1_ckh3_ckw1_pkh0_pkw2_csh2_csw1_psh2_psw2_e1_i32_o64_se0.5",
-        'r1_ckh3_ckw1_pkh0_pkw2_csh1_csw1_psh2_psw2_e1_i64_o128_se0.5',
+        "r1_ckh5_ckw1_pkh0_pkw1_csh1_csw1_psh3_psw1_e1_i8_o16_se0.27",
+        "r1_ckh5_ckw1_pkh0_pkw0_csh2_csw1_psh2_psw1_e1_i16_o32_se0.27",
+        "r1_ckh3_ckw1_pkh0_pkw2_csh2_csw1_psh2_psw2_e1_i32_o64_se0.27",
+        'r1_ckh3_ckw1_pkh0_pkw2_csh1_csw1_psh2_psw2_e1_i64_o128_se0.27',
         # 'r3_k5_s11_e6_i80_o112_se0.25',
         # 'r4_k5_s22_e6_i112_o192_se0.25',
         # 'r1_k3_s11_e6_i192_o320_se0.25',
diff --git a/wandb/debug-internal.log b/wandb/debug-internal.log
index 79fca16..bf02953 120000
--- a/wandb/debug-internal.log
+++ b/wandb/debug-internal.log
@@ -1 +1 @@
-run-20230518_171924-x8m3pldn/logs/debug-internal.log
\ No newline at end of file
+run-20230521_173323-h9j6psi8/logs/debug-internal.log
\ No newline at end of file
diff --git a/wandb/debug.log b/wandb/debug.log
index ce491a5..36948ab 120000
--- a/wandb/debug.log
+++ b/wandb/debug.log
@@ -1 +1 @@
-run-20230518_171924-x8m3pldn/logs/debug.log
\ No newline at end of file
+run-20230521_173323-h9j6psi8/logs/debug.log
\ No newline at end of file
diff --git a/wandb/latest-run b/wandb/latest-run
index bd2b586..60004d9 120000
--- a/wandb/latest-run
+++ b/wandb/latest-run
@@ -1 +1 @@
-run-20230518_171924-x8m3pldn
\ No newline at end of file
+run-20230521_173323-h9j6psi8
\ No newline at end of file
